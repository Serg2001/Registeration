@page "/counter"
@rendermode InteractiveServer

@inject IHttpClientFactory HttpClientFactory
@inject CrmRegionService CrmRegionService
@inject CrmSchoolService CrmSchoolService
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject IEmailService EmailService
@inject FormStateService FormStateService
@inject ISnackbar Snackbar

@using System.Net.Http.Json
@using MudBlazor
@using Registeration.DTOs
@using Registeration.Services

<PageTitle>Գրանցում</PageTitle>

<style>
    body {
        margin: 0;
        padding: 0;
        background: radial-gradient(circle at top left, #f7e9ff, #f4f5ff, #ffffff);
        background-attachment: fixed;
        background-repeat: no-repeat;
        font-family: 'Segoe UI', sans-serif;
        overflow-x: hidden;
    }

    .centered-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 90vh;
        padding: 2rem;
    }

    .form-box {
        background-color: white;
        padding: 3rem;
        border-radius: 16px;
        max-width: 600px;
        width: 100%;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    }

    .form-title {
        font-size: 2rem;
        font-weight: bold;
        color: #6a1b9a;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .form-button {
        background-color: #6a1b9a;
        color: white;
        font-weight: bold;
    }
</style>

<div class="centered-container">
    <div class="form-box">
        <div class="form-title">Գրանցում</div>

        <MudForm @ref="_form" Model="_model">
            <MudStack Spacing="2">

                <!-- Region -->
                <MudAutocomplete T="string"
                                 Label="Մարզ"
                                 Value="_model.RegionName"
                                 ValueChanged="async val => await OnRegionChanged(val)"
                                 SearchFunc="@SearchRegions"
                                 Variant="Variant.Outlined"
                                 Required="true"
                                 For="@(() => _model.RegionName)" />

                <!-- School -->
                <MudAutocomplete T="string"
                                 Label="Դպրոց"
                                 @bind-Value="_model.SchoolName"
                                 SearchFunc="@SearchSchools"
                                 Variant="Variant.Outlined"
                                 Required="true"
                                 Disabled="@string.IsNullOrWhiteSpace(_selectedRegionId)"
                                 For="@(() => _model.SchoolName)"
                                 MaxItems="null" />

                <!-- Address -->
                <MudAutocomplete T="string"
                                 Label="Հասցե"
                                 @bind-Value="_model.Address"
                                 SearchFunc="@SearchAddresses"
                                 Variant="Variant.Outlined"
                                 Required="true"
                                 Disabled="@string.IsNullOrWhiteSpace(_selectedRegionId)"
                                 For="@(() => _model.Address)"
                                 MaxItems="null" />

                <!-- Full Name -->
                <MudTextField T="string"
                              Label="Անուն / Ազգանուն"
                              @bind-Value="_model.FullName"
                              Variant="Variant.Outlined"
                              Required="true"
                              For="@(() => _model.FullName)" />

                <!-- Email -->
                <MudTextField T="string"
                              Label="Էլ․ հասցե"
                              @bind-Value="_model.Email"
                              Variant="Variant.Outlined"
                              InputType="InputType.Email"
                              Required="true"
                              For="@(() => _model.Email)" />

                <!-- Submit -->
                <MudButton OnClick="ValidateForm"
                           Variant="Variant.Filled"
                           Class="mt-4 form-button">
                    Գրանցվել
                </MudButton>
            </MudStack>
        </MudForm>
    </div>
</div>

@code {
    private MudForm _form = new();
    private RegistrationFormDTO _model = new();
    private string? _selectedRegionId;

    private List<ExternalRegionDTO> _regionList = new();
    private List<SchoolDTO> _currentRegionSchools = new();

    // REGION AUTOCOMPLETE
    private async Task<IEnumerable<string>> SearchRegions(string value, CancellationToken token)
    {
        if (_regionList.Count == 0)
        {
            try
            {
                var client = HttpClientFactory.CreateClient("ExternalRegions");
                var response = await client.GetFromJsonAsync<List<ExternalRegionDTO>>("api/Platform/GetAllRegions", token);
                if (response != null)
                    _regionList = response;
            }
            catch (Exception ex)
            {
                Console.WriteLine("❌ Failed to fetch regions: " + ex.Message);
            }
        }

        return string.IsNullOrWhiteSpace(value)
            ? _regionList.Select(r => r.Name)
            : _regionList.Where(r => r.Name.Contains(value, StringComparison.OrdinalIgnoreCase)).Select(r => r.Name);
    }

    // ON REGION CHANGE
    private async Task OnRegionChanged(string selectedRegionName)
    {
        _model.RegionName = selectedRegionName;
        _model.SchoolName = null;
        _model.Address = null;
        _currentRegionSchools.Clear();

        var selectedRegion = _regionList.FirstOrDefault(r => r.Name == selectedRegionName);
        _selectedRegionId = selectedRegion?.Id;
    }

    // SCHOOL AUTOCOMPLETE
    private async Task<IEnumerable<string>> SearchSchools(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(_selectedRegionId) || !Guid.TryParse(_selectedRegionId, out var regionGuid))
            return Enumerable.Empty<string>();

        _currentRegionSchools = await CrmSchoolService.GetSchoolsByRegionAsync(regionGuid);

        var filtered = string.IsNullOrWhiteSpace(value)
            ? _currentRegionSchools
            : _currentRegionSchools.Where(s => s.Name.Contains(value, StringComparison.OrdinalIgnoreCase));

        return filtered.Select(s => s.Name).Distinct();
    }

    // ADDRESS AUTOCOMPLETE
    private async Task<IEnumerable<string>> SearchAddresses(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(_selectedRegionId) || _currentRegionSchools.Count == 0)
            return Enumerable.Empty<string>();

        var filtered = string.IsNullOrWhiteSpace(value)
            ? _currentRegionSchools
            : _currentRegionSchools.Where(s => s.Address.Contains(value, StringComparison.OrdinalIgnoreCase));

        return filtered.Select(s => s.Address).Distinct();
    }

    // FORM SUBMIT
    private async Task ValidateForm()
    {
        await _form.Validate();

        if (!_form.IsValid)
        {
            Snackbar.Add("Խնդրում ենք լրացնել բոլոր պարտադիր դաշտերը։", Severity.Warning);
            return;
        }

        var matchedSchool = _currentRegionSchools
            .FirstOrDefault(s => s.Name == _model.SchoolName && s.Address == _model.Address);

        if (matchedSchool == null)
        {
            Snackbar.Add("Նշված հասցեն չի համապատասխանում ընտրած դպրոցին։", Severity.Error);
            return;
        }

        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/regions/save", _model);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();
                if (content != null && content.TryGetValue("id", out var idObj) && Guid.TryParse(idObj?.ToString(), out Guid returnedId))
                {
                    _model.Id = returnedId;
                }

                Snackbar.Add("Գրանցումը հաջողությամբ պահպանվեց։", Severity.Success);
                FormStateService.FormModel = _model;
                Navigation.NavigateTo("/nextstep");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ճանապարհը ձախողվեց․ {ex.Message}", Severity.Error);
        }
    }
}
