@page "/counter"
@rendermode InteractiveServer

@inject IHttpClientFactory HttpClientFactory
@inject CrmRegionService CrmRegionService
@inject CrmSchoolService CrmSchoolService
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject IEmailService EmailService
@inject FormStateService FormStateService
@inject ISnackbar Snackbar

@using System.Net.Http.Json
@using MudBlazor
@using Registeration.DTOs
@using Registeration.Services
@using System.Text.Json

<PageTitle>Գրանցում</PageTitle>

<style>
    body {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', sans-serif;
        background: radial-gradient(circle at center, #e4d9f9, #ffffff);
        background-attachment: fixed;
        background-repeat: no-repeat;
        overflow-x: hidden;
    }

    .blurred-bubbles {
        position: absolute;
        width: 100vw;
        height: 100vh;
        overflow: hidden;
        z-index: -1;
    }

    .bubble {
        position: absolute;
        border-radius: 50%;
        background: #b58df1;
        filter: blur(90px);
        opacity: 0.7;
    }

    .bubble1 {
        top: 10%;
        left: 5%;
        width: 300px;
        height: 300px;
    }

    .bubble2 {
        top: 30%;
        left: 60%;
        width: 400px;
        height: 400px;
    }

    .bubble3 {
        bottom: 10%;
        left: 30%;
        width: 500px;
        height: 500px;
    }

    .centered-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        padding: 2rem;
    }

    .form-box {
        background-color: rgba(255, 255, 255, 0.85);
        padding: 3rem;
        border-radius: 20px;
        max-width: 600px;
        width: 100%;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        backdrop-filter: blur(10px);
    }

    .form-title {
        font-size: 2rem;
        font-weight: bold;
        color: #6a1b9a;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .form-button {
        background-color: #6a1b9a;
        color: white;
        font-weight: bold;
    }
</style>

<div class="blurred-bubbles">
    <div class="bubble bubble1"></div>
    <div class="bubble bubble2"></div>
    <div class="bubble bubble3"></div>
</div>

<div class="centered-container">
    <div class="form-box">
        <div class="form-title">Գրանցում</div>

        <MudForm @ref="_form" Model="_model">
            <MudStack Spacing="2">
                <!-- Region -->
                <MudAutocomplete T="string"
                                 Label="Մարզ"
                                 Value="_selectedRegionName"
                                 ValueChanged="async val => await OnRegionChanged(val)"
                                 SearchFunc="@SearchRegions"
                                 Variant="Variant.Outlined"
                                 Required="true" />

                <!-- School -->
                <MudAutocomplete T="string"
                                 Label="Դպրոց"
                                 Value="_selectedSchoolName"
                                 ValueChanged="OnSchoolSelected"
                                 SearchFunc="@SearchSchools"
                                 Variant="Variant.Outlined"
                                 Required="true"
                                 Disabled="@string.IsNullOrWhiteSpace(_selectedRegionId)"
                                 MaxItems="null" />

                <!-- Address -->
                <MudAutocomplete T="string"
                                 Label="Հասցե"
                                 Value="_selectedAddress"
                                 ValueChanged="OnAddressSelected"
                                 SearchFunc="@SearchAddresses"
                                 Variant="Variant.Outlined"
                                 Required="true"
                                 Disabled="@string.IsNullOrWhiteSpace(_selectedRegionId)"
                                 MaxItems="null" />

                <!-- Director's' Name -->
                <MudTextField T="string"
                              Label="Տնօրենի Անուն"
                              @bind-Value="_model.DirectorName"
                              Variant="Variant.Outlined"
                              Required="true" />

                <!-- Director's' SurName -->
                <MudTextField T="string"
                              Label="Տնօրենի Ազգանուն"
                              @bind-Value="_model.DirectorSurName"
                              Variant="Variant.Outlined"
                              Required="true" />

                <!-- Email -->
                <MudTextField T="string"
                              Label="Էլ. հասցե"
                              @bind-Value="_model.Email"
                              Variant="Variant.Outlined"
                              InputType="InputType.Email"
                              Required="true" />

                <!-- Submit -->
                <MudButton OnClick="ValidateForm"
                           Variant="Variant.Filled"
                           Class="mt-4 form-button">
                    Գրանցվել
                </MudButton>
            </MudStack>
        </MudForm>
    </div>
</div>


@code {
    private MudForm _form = new();
    private RegistrationFormDTO _model = new();
    private string? _selectedRegionId;
    private string? _selectedRegionName;
    private string? _selectedSchoolName;
    private string? _selectedAddress;
    private Guid? _selectedSchoolId;
    private string? _selectedSchoolAddress;

    private List<ExternalRegionDTO> _regionList = new();
    private List<SchoolDTO> _currentRegionSchools = new();

    private async Task<IEnumerable<string>> SearchRegions(string value, CancellationToken token)
    {
        if (_regionList.Count == 0)
        {
            try
            {
                var client = HttpClientFactory.CreateClient("ExternalRegions");
                var response = await client.GetFromJsonAsync<List<ExternalRegionDTO>>("api/Platform/GetAllRegions", token);
                if (response != null)
                    _regionList = response;
            }
            catch (Exception ex)
            {
                Console.WriteLine("❌ Failed to fetch regions: " + ex.Message);
            }
        }

        return string.IsNullOrWhiteSpace(value)
            ? _regionList.Select(r => r.Name)
            : _regionList.Where(r => r.Name.Contains(value, StringComparison.OrdinalIgnoreCase)).Select(r => r.Name);
    }

    private async Task OnRegionChanged(string selectedRegionName)
    {
        _selectedRegionName = selectedRegionName;
        _selectedSchoolName = null;
        _selectedAddress = null;
        _selectedSchoolId = null;
        _selectedSchoolAddress = null;
        _currentRegionSchools.Clear();

        var selectedRegion = _regionList.FirstOrDefault(r => r.Name == selectedRegionName);
        _selectedRegionId = selectedRegion?.Id.ToString();
    }

    private async Task<IEnumerable<string>> SearchSchools(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(_selectedRegionId) || !Guid.TryParse(_selectedRegionId, out var regionGuid))
            return Enumerable.Empty<string>();

        _currentRegionSchools = await CrmSchoolService.GetSchoolsByRegionAsync(regionGuid);

        var filtered = string.IsNullOrWhiteSpace(value)
            ? _currentRegionSchools
            : _currentRegionSchools.Where(s => s.Name.Contains(value, StringComparison.OrdinalIgnoreCase));

        return filtered.Select(s => s.Name).Distinct();
    }

    private async Task<IEnumerable<string>> SearchAddresses(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(_selectedRegionId) || _currentRegionSchools.Count == 0)
            return Enumerable.Empty<string>();

        var filtered = string.IsNullOrWhiteSpace(value)
            ? _currentRegionSchools
            : _currentRegionSchools.Where(s => s.Address.Contains(value, StringComparison.OrdinalIgnoreCase));

        return filtered.Select(s => s.Address).Distinct();
    }

    private Task OnSchoolSelected(string selectedName)
    {
        _selectedSchoolName = selectedName;
        var match = _currentRegionSchools.FirstOrDefault(s => s.Name == selectedName);

        if (match != null)
        {
            _selectedSchoolId = match.Id;
            _selectedSchoolAddress = match.Address; // 👈 Save to compare later
        }

        return Task.CompletedTask;
    }

    private Task OnAddressSelected(string selectedAddress)
    {
        _selectedAddress = selectedAddress;
        return Task.CompletedTask;
    }

    private async Task ValidateForm()
    {
        await _form.Validate();

        if (!_form.IsValid)
        {
            Snackbar.Add("Խնդրում ենք լրացնել բոլոր դաշտերը։", Severity.Error);
            return;
        }

        if (_selectedAddress != _selectedSchoolAddress)
        {
            Snackbar.Add("Ինչ-որ բան սխալ է: Ընտրված հասցեն չի համապատասխանում ընտրված դպրոցին։", Severity.Error);
            return;
        }

        try
        {
            _model.School = new SchoolDTO
                {
                    Id = _selectedSchoolId ?? Guid.Empty,
                    Name = _selectedSchoolName ?? string.Empty,
                    Address = _selectedAddress ?? string.Empty
                };

            _model.Address = _selectedAddress ?? string.Empty;
            _model.Region = new RegionDTO { Name = _selectedRegionName ?? string.Empty };
            _model.Login = _model.Email;
            _model.Password = GenerateCode(_model.Email);
            _model.AccessCode = Guid.NewGuid().ToString().Substring(0, 8);

            // Try to save registration
            var response = await HttpClient.PostAsJsonAsync("api/regions/save", _model);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();

                if (result != null && result.TryGetValue("id", out var idObj) && Guid.TryParse(idObj?.ToString(), out Guid id))
                {
                    _model.Id = id;
                    FormStateService.FormModel = _model;
                    Snackbar.Add("Հաջողությամբ պահպանվեց։", Severity.Success);
                    Navigation.NavigateTo("/nextstep");
                }
                else
                {
                    Snackbar.Add("Չհաջողվեց ստանալ գրանցման նույնացուցիչը։", Severity.Error);
                }
            }
            else
            {
                // Handle possible duplicate registration error
                var errorContent = await response.Content.ReadAsStringAsync();

                if (errorContent.Contains("Դուք արդեն գրանցված եք"))
                {
                    Snackbar.Add("Դուք արդեն գրանցված եք։ Ստուգեք ձեր մուտքի տվյալները։", Severity.Warning);
                    return;
                }

                try
                {
                    var jsonDoc = JsonDocument.Parse(errorContent);
                    if (jsonDoc.RootElement.TryGetProperty("errors", out var errorsElement))
                    {
                        if (errorsElement.TryGetProperty("FullName", out var fullNameErrors) && fullNameErrors.GetArrayLength() > 0)
                        {
                            var errorMessage = fullNameErrors[0].GetString();
                            if (!string.IsNullOrEmpty(errorMessage) && !errorMessage.Contains("[ArmenianOnly]"))
                            {
                                Snackbar.Add(errorMessage, Severity.Error);
                            }
                        }
                        else
                        {
                            Snackbar.Add("Սխալ:", Severity.Error);
                        }
                    }
                    else
                    {
                        Snackbar.Add("Սխալ:", Severity.Error);
                    }
                }
                catch
                {
                    Snackbar.Add("Սխալ:", Severity.Error);
                }

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Սերվերի սխալ․ {ex.Message}", Severity.Error);
        }
    }




    private static string GenerateCode(string input)
    {
        using var sha256 = System.Security.Cryptography.SHA256.Create();
        var bytes = System.Text.Encoding.UTF8.GetBytes(input);
        var hash = sha256.ComputeHash(bytes);
        var hex = BitConverter.ToString(hash).Replace("-", "");
        var digitsOnly = new string(hex.Where(char.IsDigit).ToArray()).PadRight(6, '0');
        return digitsOnly.Substring(0, 6);
    }
}
