@page "/counter"
@rendermode InteractiveServer

@inject IHttpClientFactory HttpClientFactory
@inject CrmRegionService CrmRegionService
@inject CrmSchoolService CrmSchoolService
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject IEmailService EmailService
@inject FormStateService FormStateService
@inject ISnackbar Snackbar

@using System.Net.Http.Json
@using MudBlazor
@using Registeration.DTOs
@using Registeration.Services

<PageTitle>Մարզի Ընտրություն</PageTitle>

<h1>Ընտրեք Մարզ, Դպրոց և Հասցե</h1>

<MudForm @ref="_form" Model="_model">
    <MudGrid>
        <MudItem xs="12">
            <MudAutocomplete T="string"
                             Label="Մարզ"
                             Value="_model.RegionName"
                             ValueChanged="async val => await OnRegionChanged(val)"
                             SearchFunc="@SearchRegions"
                             Variant="Variant.Outlined"
                             Required="true"
                             For="@(() => _model.RegionName)" />
        </MudItem>

        <MudItem xs="12">
            <MudAutocomplete T="string"
                             Label="Դպրոց"
                             @bind-Value="_model.SchoolName"
                             SearchFunc="@SearchSchools"
                             Variant="Variant.Outlined"
                             Required="true"
                             Disabled="@string.IsNullOrWhiteSpace(_selectedRegionId)"
                             For="@(() => _model.SchoolName)"
                             MaxItems="null" />
        </MudItem>

        <MudItem xs="12">
            <MudAutocomplete T="string"
                             Label="Հասցե"
                             @bind-Value="_model.Address"
                             SearchFunc="@SearchAddresses"
                             Variant="Variant.Outlined"
                             Required="true"
                             Disabled="@string.IsNullOrWhiteSpace(_selectedRegionId)"
                             For="@(() => _model.Address)"
                             MaxItems="null" />
        </MudItem>

        <MudItem xs="12">
            <MudTextField T="string"
                          Label="Անուն / Ազգանուն"
                          @bind-Value="_model.FullName"
                          Variant="Variant.Outlined"
                          Required="true"
                          For="@(() => _model.FullName)" />
        </MudItem>

        <MudItem xs="12">
            <MudTextField T="string"
                          Label="Էլ․ հասցե"
                          @bind-Value="_model.Email"
                          Variant="Variant.Outlined"
                          InputType="InputType.Email"
                          Required="true"
                          For="@(() => _model.Email)" />
        </MudItem>

        <MudItem xs="12">
            <MudButton OnClick="ValidateForm"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="mt-4">
                Հաջորդը
            </MudButton>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    private MudForm _form;
    private RegistrationFormDTO _model = new();
    private string? _selectedRegionId;
    private List<ExternalRegionDTO> _regionList = new();
    private List<CrmSchoolDTO> _currentRegionSchools = new();

    private async Task<IEnumerable<string>> SearchRegions(string value, CancellationToken token)
    {
        if (_regionList.Count == 0)
        {
            try
            {
                var client = HttpClientFactory.CreateClient("ExternalRegions");
                var response = await client.GetFromJsonAsync<List<ExternalRegionDTO>>("api/Platform/GetAllRegions", token);

                if (response != null)
                    _regionList = response;
            }
            catch (Exception ex)
            {
                Console.WriteLine("❌ Failed to fetch regions: " + ex.Message);
            }
        }

        var regionNames = _regionList.Select(r => r.Name);
        return string.IsNullOrWhiteSpace(value)
            ? regionNames
            : regionNames.Where(r => r.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task OnRegionChanged(string selectedRegionName)
    {
        _model.RegionName = selectedRegionName;
        _model.SchoolName = null;
        _model.Address = null;
        _currentRegionSchools.Clear();

        var selectedRegion = _regionList.FirstOrDefault(r => r.Name == selectedRegionName);
        _selectedRegionId = selectedRegion?.Id;
    }

    private async Task<IEnumerable<string>> SearchSchools(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(_selectedRegionId) || !Guid.TryParse(_selectedRegionId, out var regionGuid))
            return Enumerable.Empty<string>();

        _currentRegionSchools = await CrmSchoolService.GetSchoolsByRegionAsync(regionGuid);

        var filtered = string.IsNullOrWhiteSpace(value)
            ? _currentRegionSchools
            : _currentRegionSchools.Where(s => s.Name.Contains(value, StringComparison.OrdinalIgnoreCase));

        return filtered.Select(s => s.Name).Distinct();
    }

    private async Task<IEnumerable<string>> SearchAddresses(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(_selectedRegionId) || _currentRegionSchools.Count == 0)
            return Enumerable.Empty<string>();

        var filtered = string.IsNullOrWhiteSpace(value)
            ? _currentRegionSchools
            : _currentRegionSchools.Where(s => s.Address.Contains(value, StringComparison.OrdinalIgnoreCase));

        return filtered.Select(s => s.Address).Distinct();
    }

    private async Task ValidateForm()
    {
        await _form.Validate();

        if (!_form.IsValid)
        {
            Snackbar.Add("Խնդրում ենք լրացնել բոլոր պարտադիր դաշտերը։", Severity.Warning);
            return;
        }

        // Validate that school and address match
        var matchedSchool = _currentRegionSchools
            .FirstOrDefault(s => s.Name == _model.SchoolName && s.Address == _model.Address);

        if (matchedSchool == null)
        {
            Snackbar.Add("Նշված հասցեն չի համապատասխանում ընտրած դպրոցին։", Severity.Error);
            return;
        }

        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/regions/save", _model);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Գրանցումը հաջողությամբ պահպանվեց։", Severity.Success);
                FormStateService.FormModel = _model;
                Navigation.NavigateTo("/nextstep");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"API սխալ: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ճանապարհը ձախողվեց․ {ex.Message}", Severity.Error);
        }
    }
}
