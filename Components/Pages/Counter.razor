@page "/counter"
@rendermode InteractiveServer

@using System.Threading
@using System.Net.Http.Json
@using MudBlazor
@using Registeration.DTOs
@using Registeration.Services

@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject IEmailService EmailService
@inject FormStateService FormStateService

<PageTitle>Մարզի Ընտրություն</PageTitle>

<h1>Ընտրեք Մարզ, Դպրոց և Հասցե</h1>

<MudForm @ref="_form" Model="_model">
    <MudGrid>
        <MudItem xs="12">
            <MudAutocomplete T="string"
                             Label="Մարզ"
                             Value="_model.RegionName"
                             ValueChanged="async val => await OnRegionChanged(val)"
                             SearchFunc="@SearchRegions"
                             Variant="Variant.Outlined"
                             Required="true"
                             For="@(() => _model.RegionName)" />
        </MudItem>

        <MudItem xs="12">
            <MudAutocomplete T="string"
                             Label="Դպրոց"
                             @bind-Value="_model.SchoolName"
                             SearchFunc="@SearchSchools"
                             Variant="Variant.Outlined"
                             Required="true"
                             Disabled="@(_regionId == null)"
                             For="@(() => _model.SchoolName)" />
        </MudItem>

        <MudItem xs="12">
            <MudAutocomplete T="string"
                             Label="Հասցե"
                             @bind-Value="_model.Address"
                             SearchFunc="@SearchAddresses"
                             Variant="Variant.Outlined"
                             Required="true"
                             Disabled="@(_regionId == null)"
                             For="@(() => _model.Address)" />
        </MudItem>

        <MudItem xs="12">
            <MudTextField T="string"
                          Label="Անուն / Ազգանուն"
                          @bind-Value="_model.FullName"
                          Variant="Variant.Outlined"
                          Required="true"
                          For="@(() => _model.FullName)" />
        </MudItem>

        <MudItem xs="12">
            <MudTextField T="string"
                          Label="Էլ․ Հասցե"
                          @bind-Value="_model.Email"
                          Variant="Variant.Outlined"
                          InputType="InputType.Email"
                          Required="true"
                          For="@(() => _model.Email)" />
        </MudItem>

        <MudItem xs="12">
            <MudButton OnClick="ValidateForm"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="mt-4">
                Հաջորդը
            </MudButton>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    private MudForm _form;
    private RegistrationFormDTO _model = new();
    private int? _regionId;

    private List<RegionDTO> _regionList = new();
    private List<SchoolDTO> _schoolList = new();

    private async Task<IEnumerable<string>> SearchRegions(string value, CancellationToken token)
    {
        if (_regionList.Count == 0)
        {
            _regionList = await HttpClient.GetFromJsonAsync<List<RegionDTO>>("api/regions/all-full", token);
        }

        var regionNames = _regionList.Select(r => r.Name);
        return string.IsNullOrWhiteSpace(value)
            ? regionNames
            : regionNames.Where(r => r.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task OnRegionChanged(string selectedRegionName)
    {
        _model.RegionName = selectedRegionName;
        _model.SchoolName = null;
        _model.Address = null;
        _schoolList.Clear();

        var region = _regionList.FirstOrDefault(r => r.Name == selectedRegionName);
        _regionId = region?.Id;

        if (_regionId != null)
        {
            _schoolList = await HttpClient.GetFromJsonAsync<List<SchoolDTO>>(
                $"api/regions/{_regionId}/schools-full");
        }
    }

    private Task<IEnumerable<string>> SearchSchools(string value, CancellationToken token)
    {
        var names = _schoolList.Select(s => s.Name).Distinct();
        return Task.FromResult(string.IsNullOrWhiteSpace(value)
            ? names
            : names.Where(n => n.Contains(value, StringComparison.OrdinalIgnoreCase)));
    }

    private Task<IEnumerable<string>> SearchAddresses(string value, CancellationToken token)
    {
        var addresses = _schoolList.Select(s => s.Address).Distinct();
        return Task.FromResult(string.IsNullOrWhiteSpace(value)
            ? addresses
            : addresses.Where(a => a.Contains(value, StringComparison.OrdinalIgnoreCase)));
    }

    private async Task ValidateForm()
    {
        await _form.Validate();

        if (!_form.IsValid)
            return;

        try
        {
            // Confirm region was selected
            if (_regionId == null)
            {
                var region = _regionList.FirstOrDefault(r => r.Name == _model.RegionName);
                _regionId = region?.Id;

                if (_regionId == null)
                {
                    Console.WriteLine("❌ Region not selected properly.");
                    return;
                }
            }

            // Save to database
            var response = await HttpClient.PostAsJsonAsync("api/regions/save", _model);

            if (response.IsSuccessStatusCode)
            {
                // Optional: save to state service if needed
                FormStateService.FormModel = _model;

                Navigation.NavigateTo("/nextstep");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine("❌ API error: " + error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Save failed: " + ex.Message);
        }
    }
}
