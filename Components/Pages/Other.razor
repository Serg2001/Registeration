@page "/other"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject OtherService OtherService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

@using MudBlazor
@using System.Net.Http.Json
@using Registeration.DTOs
@using Registeration.Services

<PageTitle>Գրանցում</PageTitle>

<style>
    body {
        margin: 0;
        padding: 0;
        background: radial-gradient(circle at top left, #f7e9ff, #f4f5ff, #ffffff);
        background-attachment: fixed;
        background-repeat: no-repeat;
        font-family: 'Segoe UI', sans-serif;
        overflow-x: hidden;
    }

    .centered-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 90vh;
        padding: 2rem;
    }

    .form-box {
        background-color: white;
        padding: 3rem;
        border-radius: 16px;
        max-width: 600px;
        width: 100%;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    }

    .form-title {
        font-size: 2rem;
        font-weight: bold;
        color: #6a1b9a;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .form-button {
        background-color: #6a1b9a;
        color: white;
        font-weight: bold;
    }
</style>

<div class="centered-container">
    <div class="form-box">
        <div class="form-title">Գրանցում</div>

        @if (_state == 1)
        {
            <MudForm @ref="_form" Model="_formModel">
                <MudStack Spacing="2">
                    <MudAutocomplete T="string" 
                                     Label="Select Country" 
                                     Value="@_formModel.Country"
                                     ValueChanged="@OnCountryChanged"
                                     SearchFunc="@SearchCountries"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     For="@(() => _formModel.Country)"
                                     Dense="true"
                                     Clearable="true"
                                     Placeholder="Type to search countries..."
                                     ResetValueOnEmptyText="true"
                                     DebounceInterval="500"
                                     MaxItems="null"
                                     Loading="@isCountryLoading">
                        <LoadingContent>
                            <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                        </LoadingContent>
                    </MudAutocomplete>

                    <MudAutocomplete T="string" 
                                     Label="Select City" 
                                     Value="@_formModel.City"
                                     ValueChanged="@OnCityChanged"
                                     SearchFunc="@SearchCities"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     For="@(() => _formModel.City)"
                                     Dense="true"
                                     Clearable="true"
                                     Placeholder="Type to search cities..."
                                     ResetValueOnEmptyText="true"
                                     DebounceInterval="500"
                                     MaxItems="null"
                                     Loading="@isCityLoading"
                                     Disabled="@string.IsNullOrEmpty(selectedCountryCode)">
                        <LoadingContent>
                            <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                        </LoadingContent>
                    </MudAutocomplete>

                    <MudButton Variant="Variant.Filled" 
                               Class="mt-4 form-button"
                               OnClick="@HandleNextInState1">
                        Հաջորդը
                    </MudButton>
                </MudStack>
            </MudForm>
        }
        else if (_state == 2)
        {
            <MudForm @ref="_form" Model="_formModel">
                <MudStack Spacing="2">
                    <MudTextField T="string" 
                                  Label="Անուն Ազգանուն" 
                                  @bind-Value="_formModel.NameSurname"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  For="@(() => _formModel.NameSurname)" />

                    <MudAutocomplete T="string" 
                                     Label="Մասնագիտություն" 
                                     Value="@_formModel.Profession"
                                     ValueChanged="@OnProfessionChanged"
                                     SearchFunc="@SearchProfessions"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     For="@(() => _formModel.Profession)"
                                     Dense="true"
                                     Clearable="true"
                                     Placeholder="Select profession..."
                                     ResetValueOnEmptyText="true"
                                     DebounceInterval="500"
                                     MaxItems="null" />

                    @if (_formModel.Profession == "Այլ")
                    {
                        <MudTextField T="string" 
                                      Label="Մասնագիտություն (Նշեք)" 
                                      @bind-Value="_formModel.CustomProfession"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      For="@(() => _formModel.CustomProfession)" />
                    }

                    <MudButton Variant="Variant.Filled" 
                               Class="mt-4 form-button"
                               OnClick="@HandleNextInState2">
                        Հաջորդը
                    </MudButton>
                </MudStack>
            </MudForm>
        }
        else if (_state == 3)
        {
            <MudForm @ref="_form" Model="_formModel">
                <MudStack Spacing="2">
                    <MudTextField T="int?" 
                                  Label="Տարիք" 
                                  @bind-Value="_formModel.Age"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  For="@(() => _formModel.Age)" />

                    @if (_formModel.Country != "Armenia" && _formModel.Profession == "Աշակերտ")
                    {
                        <MudTextField T="string" 
                                      Label="Էլ․ Հասցե" 
                                      @bind-Value="_formModel.Email"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Email"
                                      Required="true"
                                      For="@(() => _formModel.Email)" />
                        <MudTextField T="string" 
                                      Label="Հեռ․ Համար" 
                                      @bind-Value="_formModel.Phone"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      For="@(() => _formModel.Phone)" />
                    }
                    else if (_formModel.Country != "Armenia" && _formModel.Profession == "Ուսուցիչ")
                    {
                        <MudTextField T="string" 
                                      Label="Դասավանդման Վայր" 
                                      @bind-Value="_formModel.TeachingPlace"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      For="@(() => _formModel.TeachingPlace)" />
                        <MudTextField T="string" 
                                      Label="Դասավանդման առարկա" 
                                      @bind-Value="_formModel.TeachingSubject"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      For="@(() => _formModel.TeachingSubject)" />
                        <MudTextField T="string" 
                                      Label="Հեռ․ Համար" 
                                      @bind-Value="_formModel.Phone"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      For="@(() => _formModel.Phone)" />
                        <MudTextField T="string" 
                                      Label="Էլ․ Հասցե" 
                                      @bind-Value="_formModel.Email"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Email"
                                      Required="true"
                                      For="@(() => _formModel.Email)" />
                    }
                    else if (_formModel.Profession == "Այլ" || _formModel.Country != "Armenia")
                    {
                        <MudTextField T="string" 
                                      Label="Էլ․ Հասցե" 
                                      @bind-Value="_formModel.Email"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Email"
                                      Required="true"
                                      For="@(() => _formModel.Email)" />
                        <MudTextField T="string" 
                                      Label="Հեռ․ Համար" 
                                      @bind-Value="_formModel.Phone"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      For="@(() => _formModel.Phone)" />
                        <MudTextField T="string" 
                                      Label="Նպատակ" 
                                      @bind-Value="_formModel.Purpose"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      For="@(() => _formModel.Purpose)" />
                    }

                    <MudButton Variant="Variant.Filled" 
                               Class="mt-4 form-button"
                               OnClick="@HandleNextInState3">
                        Հաջորդը
                    </MudButton>
                </MudStack>
            </MudForm>
        }
    </div>
</div>

@code {
    private int _state = 1; // 1: Select country/city, 2: Enter name/profession, 3: Enter age and additional parameters
    private MudForm _form = new();
    private OtherDTO _formModel = new();
    private List<Country> _countries = new();
    private List<City> _cities = new();
    private bool isCountryLoading = false;
    private bool isCityLoading = false;
    private string selectedCountryCode = string.Empty;
    private string _lastCountryCode = string.Empty;

    private async Task<IEnumerable<string>> SearchCountries(string value, CancellationToken cancellationToken)
    {
        if (_countries.Count == 0)
        {
            isCountryLoading = true;
            _countries = await OtherService.GetAllCountriesAsync(cancellationToken);
            isCountryLoading = false;
            await InvokeAsync(StateHasChanged);
        }

        return string.IsNullOrWhiteSpace(value)
            ? _countries.Select(c => c.Name.Common)
            : _countries.Where(c => c.Name.Common.Contains(value, StringComparison.OrdinalIgnoreCase))
                        .Select(c => c.Name.Common);
    }

    private async Task<IEnumerable<string>> SearchCities(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(selectedCountryCode))
        {
            return Array.Empty<string>();
        }

        if (_cities.Count == 0 || _lastCountryCode != selectedCountryCode)
        {
            isCityLoading = true;
            _cities = await OtherService.GetCitiesByCountryAsync(selectedCountryCode, cancellationToken);
            _lastCountryCode = selectedCountryCode;
            isCityLoading = false;
            await InvokeAsync(StateHasChanged);
        }

        return string.IsNullOrWhiteSpace(value)
            ? _cities.Select(c => c.Name)
            : _cities.Where(c => c.Name.Contains(value, StringComparison.OrdinalIgnoreCase))
                     .Select(c => c.Name);
    }

    private async Task<IEnumerable<string>> SearchProfessions(string value, CancellationToken cancellationToken)
    {
        var professions = new List<string> { "Աշակերտ", "Ուսուցիչ", "Ուսանող", "Դասախոս", "Այլ" };
        await Task.Delay(100, cancellationToken);

        return string.IsNullOrWhiteSpace(value)
            ? professions
            : professions.Where(p => p.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task OnCountryChanged(string value)
    {
        _formModel.Country = value;
        var selected = _countries.FirstOrDefault(c => c.Name.Common == value);
        selectedCountryCode = selected?.Cca2 ?? string.Empty;
        Console.WriteLine($"Selected country: {_formModel.Country}, Code: {selectedCountryCode}");
        if (selectedCountryCode != _lastCountryCode)
        {
            _cities.Clear();
            _formModel.City = string.Empty;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnCityChanged(string value)
    {
        _formModel.City = value;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnProfessionChanged(string value)
    {
        _formModel.Profession = value;
        if (_formModel.Profession != "Այլ")
        {
            _formModel.CustomProfession = string.Empty;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleNextInState1()
    {
        await _form.Validate();
        Console.WriteLine($"State 1 - Form Valid: {_form.IsValid}");
        if (!_form.IsValid)
        {
            Snackbar.Add("Խնդրում ենք լրացնել բոլոր պարտադիր դաշտերը։", Severity.Warning);
            return;
        }
        _state = 2;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleNextInState2()
    {
        await _form.Validate();
        Console.WriteLine($"State 2 - Form Valid: {_form.IsValid}");
        if (!_form.IsValid)
        {
            Snackbar.Add("Խնդրում ենք լրացնել բոլոր պարտադիր դաշտերը։", Severity.Warning);
            return;
        }

        // Check navigation conditions for Armenia
        if (_formModel.Country == "Armenia" && _formModel.Profession == "Աշակերտ")
        {
            try
            {
                var response = await HttpClient.PostAsJsonAsync("api/other/save", _formModel);
                Console.WriteLine($"API Response Status: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Գրանցումը հաջողությամբ պահպանվեց։", Severity.Success);
                    NavigationManager.NavigateTo("/otherpupil");
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"API Error: {error}");
                    Snackbar.Add($"API սխալ: {error}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception: {ex.Message}");
                Snackbar.Add($"Ճանապարհը ձախողվեց․ {ex.Message}", Severity.Error);
            }
        }
        else if (_formModel.Country == "Armenia" && _formModel.Profession == "Ուսուցիչ")
        {
            try
            {
                var response = await HttpClient.PostAsJsonAsync("api/other/save", _formModel);
                Console.WriteLine($"API Response Status: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Գրանցումը հաջողությամբ պահպանվեց։", Severity.Success);
                    NavigationManager.NavigateTo("/otherteacher");
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"API Error: {error}");
                    Snackbar.Add($"API սխալ: {error}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception: {ex.Message}");
                Snackbar.Add($"Ճանապարհը ձախողվեց․ {ex.Message}", Severity.Error);
            }
        }
        else
        {
            // Transition to state 3 for additional fields
            _state = 3;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleNextInState3()
    {
        await _form.Validate();
        Console.WriteLine($"State 3 - Form Valid: {_form.IsValid}");
        if (!_form.IsValid)
        {
            Snackbar.Add("Խնդրում ենք լրացնել բոլոր պարտադիր դաշտերը։", Severity.Warning);
            return;
        }

        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/other/save", _formModel);
            Console.WriteLine($"API Response Status: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Գրանցումը հաջողությամբ պահպանվեց։", Severity.Success);
                NavigationManager.NavigateTo("/final");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API Error: {error}");
                Snackbar.Add($"API սխալ: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            Snackbar.Add($"Ճանապարհը ձախողվեց․ {ex.Message}", Severity.Error);
        }
    }
}