@page "/other"

@using MudBlazor
@using System.Net.Http.Json
@inject IHttpClientFactory HttpClientFactory
@inherits MudAutocomplete<string>

<MudAutocomplete T="string" 
                 Label="Select Country" 
                 Value="@Value"
                 ValueChanged="@OnValueChanged"
                 SearchFunc="@Search"
                 Dense="true"
                 Variant="Variant.Outlined"
                 Clearable="true"
                 Placeholder="Type to search countries..."
                 ResetValueOnEmptyText="true"
                 DebounceInterval="500"
                 MaxItems="null"
                 Loading="@isLoading">
    <LoadingContent>
        <MudProgressCircular Indeterminate="true" Size="Size.Small" />
    </LoadingContent>
</MudAutocomplete>

@code {
    private List<Country> _countries = new();
    private bool isLoading = false;

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        if (_countries.Count == 0)
        {
            try
            {
                isLoading = true;
                using var client = HttpClientFactory.CreateClient("RestCountries");
                var response = await client.GetFromJsonAsync<List<Country>>("all?fields=name", token);
                if (response != null)
                    _countries = response.OrderBy(c => c.Name.Common).ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine("❌ Failed to fetch countries: " + ex.Message);
                _countries = new List<Country>();
            }
            finally
            {
                isLoading = false;
                await InvokeAsync(StateHasChanged);
            }
        }

        // Add slight delay to stabilize rapid input
        await Task.Delay(100, token);

        return string.IsNullOrWhiteSpace(value)
            ? _countries.Select(c => c.Name.Common)
            : _countries.Where(c => c.Name.Common.Contains(value, StringComparison.OrdinalIgnoreCase))
                        .Select(c => c.Name.Common);
    }

    private Task OnValueChanged(string value)
    {
        Value = value;
        ValueChanged.InvokeAsync(value);
        return Task.CompletedTask;
    }

    private class Country
    {
        public Name Name { get; set; } = new();
    }

    private class Name
    {
        public string Common { get; set; } = string.Empty;
    }
}