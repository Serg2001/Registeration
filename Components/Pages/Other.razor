@page "/other"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject OtherService OtherService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject FromStateServiceOther FromStateServiceOther

@using MudBlazor
@using System.Net.Http.Json
@using Registeration.DTOs
@using Registeration.Services
@using System.ComponentModel.DataAnnotations

<PageTitle>Գրանցում</PageTitle>

<style>
    body {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', sans-serif;
        background: radial-gradient(circle at center, #e4d9f9, #ffffff);
        background-attachment: fixed;
        background-repeat: no-repeat;
        overflow-x: hidden;
    }

    .blurred-bubbles {
        position: absolute;
        width: 100vw;
        height: 100vh;
        overflow: hidden;
        z-index: -1;
    }

    .bubble {
        position: absolute;
        border-radius: 50%;
        background: #b58df1;
        filter: blur(90px);
        opacity: 0.7;
    }

    .bubble1 {
        top: 10%;
        left: 5%;
        width: 300px;
        height: 300px;
    }

    .bubble2 {
        top: 30%;
        left: 60%;
        width: 400px;
        height: 400px;
    }

    .bubble3 {
        bottom: 10%;
        left: 30%;
        width: 500px;
        height: 500px;
    }

    .centered-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        padding: 2rem;
    }

    .form-box {
        background-color: rgba(255, 255, 255, 0.85);
        padding: 3rem;
        border-radius: 20px;
        max-width: 600px;
        width: 100%;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        backdrop-filter: blur(10px);
    }

    .form-title {
        font-size: 2rem;
        font-weight: bold;
        color: #6a1b9a;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .form-button {
        background-color: #6a1b9a;
        color: white;
        font-weight: bold;
    }
</style>

<div class="blurred-bubbles">
    <div class="bubble bubble1"></div>
    <div class="bubble bubble2"></div>
    <div class="bubble bubble3"></div>
</div>

<div class="centered-container">
    <div class="form-box">
        <div class="form-title">Գրանցում</div>

        @* Keep your step-by-step forms unchanged *@
        @if (_state == 1)
        {
            <MudForm @ref="_form" Model="_formModel">
                <MudStack Spacing="2">
                    <MudAutocomplete T="string" 
                                     Label="Select Country" 
                                     Value="@_formModel.Country"
                                     ValueChanged="@OnCountryChanged"
                                     SearchFunc="@SearchCountries"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     For="@(() => _formModel.Country)"
                                     Dense="true"
                                     Clearable="true"
                                     Placeholder="Type to search countries..."
                                     ResetValueOnEmptyText="true"
                                     DebounceInterval="500"
                                     MaxItems="null"
                                     Loading="@isCountryLoading">
                        <LoadingContent>
                            <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                        </LoadingContent>
                    </MudAutocomplete>

                    <MudAutocomplete T="string" 
                                     Label="Select City" 
                                     Value="@_formModel.City"
                                     ValueChanged="@OnCityChanged"
                                     SearchFunc="@SearchCities"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     For="@(() => _formModel.City)"
                                     Dense="true"
                                     Clearable="true"
                                     Placeholder="Type to search cities..."
                                     ResetValueOnEmptyText="true"
                                     DebounceInterval="500"
                                     MaxItems="null"
                                     Loading="@isCityLoading"
                                     Disabled="@string.IsNullOrEmpty(selectedCountryCode)">
                        <LoadingContent>
                            <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                        </LoadingContent>
                    </MudAutocomplete>

                    <MudButton Variant="Variant.Filled" 
                               Class="mt-4 form-button"
                               OnClick="@HandleNextInState1">
                        Հաջորդը
                    </MudButton>
                </MudStack>
            </MudForm>
        }
        else if (_state == 2)
        {
            <MudForm @ref="_form" Model="_formModel">
                <MudStack Spacing="2">
                    <MudTextField T="string" 
                                  Label="Անուն Ազգանուն" 
                                  @bind-Value="_formModel.NameSurname"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  For="@(() => _formModel.NameSurname)" />

                    <MudAutocomplete T="string" 
                                     Label="Մասնագիտություն" 
                                     Value="@_formModel.Profession"
                                     ValueChanged="@OnProfessionChanged"
                                     SearchFunc="@SearchProfessions"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     For="@(() => _formModel.Profession)"
                                     Dense="true"
                                     Clearable="true"
                                     Placeholder="Select profession..."
                                     ResetValueOnEmptyText="true"
                                     DebounceInterval="500"
                                     MaxItems="null" />

                    @if (_formModel.Profession == "Այլ")
                    {
                        <MudTextField T="string" 
                                      Label="Մասնագիտություն (Նշեք)" 
                                      @bind-Value="_formModel.CustomProfession"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      For="@(() => _formModel.CustomProfession)" />
                    }

                    <MudButton Variant="Variant.Filled" 
                               Class="mt-4 form-button"
                               OnClick="@HandleNextInState2">
                        Հաջորդը
                    </MudButton>
                </MudStack>
            </MudForm>
        }
        else if (_state == 3)
        {
            <MudForm @ref="_form" Model="_formModel">
                <MudStack Spacing="2">
                    <MudTextField T="int?" 
                                  Label="Տարիք" 
                                  @bind-Value="_formModel.Age"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  For="@(() => _formModel.Age)" />

                    @if (_formModel.Country == "Armenia" && _formModel.Profession == "Ուսանող")
                    {
                        <MudAutocomplete T="string" 
                                         Label="Սովորելու վայր" 
                                         Value="@_formModel.StudyPlace"
                                         ValueChanged="@(value => _formModel.StudyPlace = value)"
                                         SearchFunc="@SearchUniversities"
                                         Variant="Variant.Outlined"
                                         Required="true"
                                         For="@(() => _formModel.StudyPlace)"
                                         Dense="true"
                                         Clearable="true"
                                         Placeholder="Select university..."
                                         ResetValueOnEmptyText="true"
                                         DebounceInterval="500"
                                         MaxItems="null" />
                    }
                    else if (_formModel.Country != "Armenia" && _formModel.Profession == "Ուսանող")
                    {
                        <MudTextField T="string" 
                                      Label="Սովորելու վայր" 
                                      @bind-Value="_formModel.StudyPlace"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      For="@(() => _formModel.StudyPlace)" />
                    }
                    else if (_formModel.Country == "Armenia" && _formModel.Profession == "Դասախոս")
                    {
                        <MudAutocomplete T="string" 
                                         Label="Դասավանդման Վայր" 
                                         Value="@_formModel.TeachingPlace"
                                         ValueChanged="@(value => _formModel.TeachingPlace = value)"
                                         SearchFunc="@SearchUniversities"
                                         Variant="Variant.Outlined"
                                         Required="true"
                                         For="@(() => _formModel.TeachingPlace)"
                                         Dense="true"
                                         Clearable="true"
                                         Placeholder="Select university..."
                                         ResetValueOnEmptyText="true"
                                         DebounceInterval="500"
                                         MaxItems="null" />
                        <MudTextField T="string" 
                                      Label="Դասավանդման առարկա" 
                                      @bind-Value="_formModel.TeachingSubject"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      For="@(() => _formModel.TeachingSubject)" />
                    }
                    else if (_formModel.Country != "Armenia" && _formModel.Profession == "Դասախոս")
                    {
                        <MudTextField T="string" 
                                      Label="Դասավանդման Վայր" 
                                      @bind-Value="_formModel.TeachingPlace"
                                      Variant="Variant.Outlined"  
                                      Required="true"
                                      For="@(() => _formModel.TeachingPlace)" />
                        <MudTextField T="string" 
                                      Label="Դասավանդման առարկա" 
                                      @bind-Value="_formModel.TeachingSubject"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      For="@(() => _formModel.TeachingSubject)" />
                    }
                    else if (_formModel.Country == "Armenia" && _formModel.Profession == "Աշակերտ")
                    {
                        Navigation.NavigateTo("/otherpupil");
                    }
                    else if (_formModel.Country == "Armenia" && _formModel.Profession == "Ուսուցիչ")
                    {
                        Navigation.NavigateTo("/otherteacher");
                    }

                    <MudButton Variant="Variant.Filled"
                               Class="mt-4 form-button"
                               OnClick="@HandleNextInState3">
                        Հաջորդը
                    </MudButton>
                </MudStack>
            </MudForm>
        }
        else if (_state == 4)
        {
            <MudForm @ref="_form" Model="_formModel">
                <MudStack Spacing="2">
                    <MudTextField T="string"
                                  Label="Էլ․ Հասցե"
                                  @bind-Value="_formModel.Email"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Email"
                                  Required="true"
                                  For="@(() => _formModel.Email)" />

                    <MudTextField T="string"
                                  Label="Հեռ․ Համար"
                                  @bind-Value="_formModel.Phone"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  For="@(() => _formModel.Phone)" />

                    <MudTextField T="string"
                                  Label="Նպատակ"
                                  @bind-Value="_formModel.Purpose"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  For="@(() => _formModel.Purpose)" />

                    <MudButton Variant="Variant.Filled"
                               Class="mt-4 form-button"
                               OnClick="@HandleNextInState4">
                        Հաստատել
                    </MudButton>
                </MudStack>
            </MudForm>
        }
    </div>
</div>

@code {
    private int _state = 1; // 1: Select country/city, 2: Enter name/profession, 3: Enter age and additional parameters, 4: Enter email/phone/purpose
    private MudForm _form = new();
    private OtherDTO _formModel = new();
    private List<Country> _countries = new();
    private List<City> _cities = new();
    private bool isCountryLoading = false;
    private bool isCityLoading = false;
    private string selectedCountryCode = string.Empty;
    private string _lastCountryCode = string.Empty;

    private readonly List<string> _universities = new()
    {
        "Երևանի պետական համալսարան",
        "Հայաստանի ազգային ագրարային համալսարան",
        "Երևանի պետական բժշկական համալսարան",
        "Խաչատուր Աբովյանի անվան հայկական պետական մանկավարժական համալսարան",
        "Երևանի Կոմիտասի անվան պետական կոնսերվատորիա",
        "Հայաստանի ազգային պոլիտեխնիկական համալսարան",
        "Երևանի Վալերի Բրյուսովի անվան պետական լեզվաբանական համալսարան",
        "Երևանի թատրոնի և կինոյի պետական ինստիտուտ",
        "Հայկական պետական ֆիզիկական կուլտուրայի և սպորտի ինստիտուտ",
        "Երևանի գեղարվեստի պետական ակադեմիա",
        "Հայաստանի պետական տնտեսագիտական համալսարան",
        "Ամերիկյան համալսարան Հայաստանում",
        "Հայաստանի ճգնաժամային կառավարման պետական ակադեմիա",
        "Արմենակ Խանփերյանցի անվան ռազմական ավիացիոն համալսարան",
        "Հայաստանի պետական կառավարման ակադեմիա",
        "Վազգեն Սարգսյանի անվան ռազմական համալսարան",
        "Հայաստանում ֆրանսիական համալսարան",
        "Ռուս-հայկական (Սլավոնական) համալսարան",
        "Եվրոպական համալսարան Հայաստանում",
        "Հայաստանի ազգային ճարտարապետության և շինարարության համալսարան",
        "Շիրակի պետական համալսարան՝ Միքայել Նալբանդյանի անվան",
        "Գավառի պետական համալսարան",
        "Գորիսի պետական համալսարան",
        "Վանաձորի պետական համալսարան՝ Հովհաննես Թումանյանի անվան",
        "Գալիք համալսարան",
        "Երևանի Հայբուսակ համալսարան",
        "Երևանի Գլաձոր համալսարան",
        "Երևանի Մեսրոպ Մաշտոցի անվան համալսարան",
        "ՄՖԲ Ֆինանսների ակադեմիա",
        "Հայկական բժշկական ինստիտուտ",
        "Արտավազդ Մկրտչյանի անվան տնտեսագիտության և իրավունքի համալսարան",
        "Ուրարտու գործնական հոգեբանության և սոցիոլոգիայի համալսարան",
        "Ավանդական բժշկության համալսարան",
        "Միջազգային տնտեսական հարաբերությունների համալսարան",
        "Երևանի գյուղատնտեսական համալսարան",
        "Սուրբ Թերեզայի անվան բժշկական համալսարան",
        "Ազպատ-Վետերան դատաբժշկական և հոգեբանության ինստիտուտ",
        "Անանիա Շիրակացու անվան միջազգային հարաբերությունների համալսարան",
        "Ազգային գեղարվեստի ակադեմիա",
        "Եվրասիա միջազգային համալսարան",
        "Հյուսիսային համալսարան",
        "Երևանի կառավարման համալսարան",
        "Մովսես Խորենացու անվան համալսարան",
        "Երևանի մշակույթի համալսարան",
        "Միջազգային հաշվապահական ուսուցման կենտրոն",
        "Գյումրու «Առաջընթաց» համալսարան",
        "Մխիթար Գոշի անվան հայ-ռուսական միջազգային համալսարան",
        "Հրազդանի հումանիտար ինստիտուտ",
        "Վարդենիսի Վիկտոր Համբարձումյանի անվան ուսուցչական ինստիտուտ",
        "Պլեխանովի անվան ռուսական տնտեսագիտական համալսարանի երևանյան մասնաճյուղ",
        "Տերնոպիլի ազգային տնտեսագիտական համալսարանի գիտակրթական կենտրոն",
        "Ռուսաստանի միջազգային զբոսաշրջության ակադեմիայի երևանյան մասնաճյուղ",
        "Մ.Վ. Լոմոնոսովի անվան Մոսկվայի պետական համալսարանի երևանյան մասնաճյուղ"
    };

    private async Task<IEnumerable<string>> SearchCountries(string value, CancellationToken cancellationToken)
    {
        if (_countries.Count == 0)
        {
            isCountryLoading = true;
            _countries = await OtherService.GetAllCountriesAsync(cancellationToken);
            isCountryLoading = false;
            await InvokeAsync(StateHasChanged);
        }

        return string.IsNullOrWhiteSpace(value)
            ? _countries.Select(c => c.Name.Common)
            : _countries.Where(c => c.Name.Common.Contains(value, StringComparison.OrdinalIgnoreCase))
                        .Select(c => c.Name.Common);
    }

    private async Task<IEnumerable<string>> SearchCities(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(selectedCountryCode))
        {
            return Array.Empty<string>();
        }

        if (_cities.Count == 0 || _lastCountryCode != selectedCountryCode)
        {
            isCityLoading = true;
            _cities = await OtherService.GetCitiesByCountryAsync(selectedCountryCode, cancellationToken);
            _lastCountryCode = selectedCountryCode;
            isCityLoading = false;
            await InvokeAsync(StateHasChanged);
        }

        return string.IsNullOrWhiteSpace(value)
            ? _cities.Select(c => c.Name)
            : _cities.Where(c => c.Name.Contains(value, StringComparison.OrdinalIgnoreCase))
                     .Select(c => c.Name);
    }

    private async Task<IEnumerable<string>> SearchProfessions(string value, CancellationToken cancellationToken)
    {
        var professions = new List<string> { "Աշակերտ", "Ուսուցիչ", "Ուսանող", "Դասախոս", "Այլ" };
        await Task.Delay(100, cancellationToken);

        return string.IsNullOrWhiteSpace(value)
            ? professions
            : professions.Where(p => p.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchUniversities(string value, CancellationToken cancellationToken)
    {
        await Task.Delay(100, cancellationToken);
        return string.IsNullOrWhiteSpace(value)
            ? _universities
            : _universities.Where(u => u.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task OnCountryChanged(string value)
    {
        _formModel.Country = value;
        var selected = _countries.FirstOrDefault(c => c.Name.Common == value);
        selectedCountryCode = selected?.Cca2 ?? string.Empty;
        Console.WriteLine($"Selected country: {_formModel.Country}, Code: {selectedCountryCode}");
        if (selectedCountryCode != _lastCountryCode)
        {
            _cities.Clear();
            _formModel.City = string.Empty;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnCityChanged(string value)
    {
        _formModel.City = value;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnProfessionChanged(string value)
    {
        _formModel.Profession = value;
        if (_formModel.Profession != "Այլ")
        {
            _formModel.CustomProfession = string.Empty;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleNextInState1()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            Snackbar.Add("Խնդրում ենք լրացնել բոլոր պարտադիր դաշտերը։", Severity.Warning);
            return;
        }
        _state = 2;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleNextInState2()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            Snackbar.Add("Խնդրում ենք լրացնել բոլոր պարտադիր դաշտերը։", Severity.Warning);
            return;
        }

        // Additional manual validation for Armenian fields
        var validationContext = new ValidationContext(_formModel);
        var validationResults = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(_formModel, validationContext, validationResults, validateAllProperties: true);

        var nameSurnameError = validationResults.FirstOrDefault(e => e.MemberNames.Contains(nameof(_formModel.NameSurname)));
        if (nameSurnameError != null)
        {
            Snackbar.Add(nameSurnameError.ErrorMessage, Severity.Error);
            return;
        }

        var customProfessionError = validationResults.FirstOrDefault(e => e.MemberNames.Contains(nameof(_formModel.CustomProfession)));
        if (customProfessionError != null)
        {
            Snackbar.Add(customProfessionError.ErrorMessage, Severity.Error);
            return;
        }

        _state = 3;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleNextInState3()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            Snackbar.Add("Խնդրում ենք լրացնել բոլոր պարտադիր դաշտերը։", Severity.Warning);
            return;
        }

        var validationContext = new ValidationContext(_formModel);
        var validationResults = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(_formModel, validationContext, validationResults, validateAllProperties: true);

        // Check relevant fields
        foreach (var field in new[] { nameof(_formModel.TeachingPlace), nameof(_formModel.TeachingSubject), nameof(_formModel.StudyPlace) })
        {
            var fieldError = validationResults.FirstOrDefault(e => e.MemberNames.Contains(field));
            if (fieldError != null)
            {
                Snackbar.Add(fieldError.ErrorMessage, Severity.Error);
                return;
            }
        }

        _state = 4;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleNextInState4()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            Snackbar.Add("Խնդրում ենք լրացնել բոլոր պարտադիր դաշտերը։", Severity.Warning);
            return;
        }

        var validationContext = new ValidationContext(_formModel);
        var validationResults = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(_formModel, validationContext, validationResults, validateAllProperties: true);

        var purposeError = validationResults.FirstOrDefault(e => e.MemberNames.Contains(nameof(_formModel.Purpose)));
        if (purposeError != null)
        {
            Snackbar.Add(purposeError.ErrorMessage, Severity.Error);
            return;
        }

        try
        {
            _formModel.Id = Guid.NewGuid();
            var response = await HttpClient.PostAsJsonAsync("api/other/save", _formModel);

            if (response.IsSuccessStatusCode)
            {
                FromStateServiceOther.OtherModel = _formModel;
                Snackbar.Add("Գրանցումը հաջողությամբ պահպանվեց։", Severity.Success);

                if (_formModel.Country == "Armenia" && _formModel.Profession == "Աշակերտ")
                {
                    Navigation.NavigateTo("/otherpupil");
                }
                else if (_formModel.Country == "Armenia" && _formModel.Profession == "Ուսուցիչ")
                {
                    Navigation.NavigateTo("/otherteacher");
                }
                else
                {
                    Navigation.NavigateTo("/nextstep-for-other");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();

                // Check for specific error text
                if (errorContent.Contains("Դուք արդեն գրանցված եք:"))
                {
                    Snackbar.Add("Դուք արդեն գրանցված եք։ Ստուգեք ձեր մուտքի տվյալները։", Severity.Warning);
                    return;
                }

                Snackbar.Add($"API սխալ: {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ճանապարհը ձախողվեց․ {ex.Message}", Severity.Error);
        }
    }

}