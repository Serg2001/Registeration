@page "/register"
@using MailKit
@using Registeration.DTOs
@using Registeration.Services
@using System.ComponentModel.DataAnnotations
@using static Registeration.Responses.CustomResponses
@inject IJSRuntime js
@inject IAccountService accountService
@inject IEmailService emailService


@if (_state == 0)
{
    <EditForm Model="Register" OnValidSubmit="RegisterClicked">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="card mt-4">
                        <div class="card-body">
                            <div class="form-group">
                                <label for="socNumber">Սոց. Քարտ</label>
                                <InputText id="socNumber" class="form-control" @bind-Value="Register.SocNumber" />
                                <ValidationMessage For="@(() => Register.SocNumber)" />
                                <small class="form-text text-muted">Min 4, Max. 15 characters</small>
                            </div>

                            <div class="form-group mt-3">
                                <label for="passport">Անձնագիր/Ծննդյան Վկայական</label>
                                <InputText id="passport" class="form-control" @bind-Value="Register.Passport" />
                                <ValidationMessage For="@(() => Register.Passport)" />
                            </div>
                        </div>

                        <div class="card-footer text-end">
                            <button type="submit" class="btn btn-primary">Next</button>
                        </div>
                    </div>

                    <p class="text-center mt-3 text-muted">
                        Լրացրեք բոլոր տվյալները հաջորդ քայլին անցնելու համար:
                    </p>
                </div>
            </div>
        </div>
    </EditForm>
}

@if (_state == 1)
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-6 offset-md-3">
                <MudTextField @bind-Value="Surname" Label="Ա․ Ա․ Հ․" ReadOnly="true" Variant="Variant.Filled" />
                <MudTextField @bind-Value="Region" Label="Մարզ" ReadOnly="true" Variant="Variant.Filled" />
                <MudTextField @bind-Value="School" Label="Դպրոց" ReadOnly="true" Variant="Variant.Filled" />
                <MudTextField @bind-Value="Grade" Label="Դասարան" ReadOnly="true" Variant="Variant.Filled" />
                <MudTextField @bind-Value="DateOfBirth" Label="Ծննդյան օր" ReadOnly="true" Variant="Variant.Filled" />

                <div class="d-flex align-center gap-4 mt-4">
                    <MudCheckBox T="bool" Label="I agree!" @bind-Value="isAgreed" Color="Color.Success" />
                    <MudCheckBox T="bool" Label="I disagree!" @bind-Value="isDisagreed" Color="Color.Error" />
                </div>

                <div class="d-flex gap-3 mt-4">
                    <MudButton ButtonType="ButtonType.Submit"
                    Disabled="@(!isAgreed || isDisagreed)"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    OnClick="OnNextClicked">
                        NEXT
                    </MudButton>

                    <MudButton ButtonType="ButtonType.Submit"
                    Disabled="@(isAgreed || !isDisagreed)"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    OnClick="ContactUs">
                        Contact Us
                    </MudButton>
                </div>
            </div>
        </div>
    </div>
}

@if (_state == 2)
{
    <EditForm Model="Mail" OnValidSubmit=SendEmailVerificationCode>
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mt-3">
            <label for="email">Email Address</label>
            <InputText id="email" class="form-control" @bind-Value="Mail.Email" />
            <ValidationMessage For="@(() => Mail.Email)" />
        </div>

        <button type="submit" class="btn btn-outline-primary mt-2">Send Code</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(VerificationResult))
    {
        <p class="text-success mt-2">@VerificationResult</p>
    }
}

@if (_state == 3)
{
    <EditForm Model="inputCodeModel" OnValidSubmit="VerifyCode">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mt-3">
            <label for="inputCodeModel">Enter the 6-digit code sent to your email</label>
            <InputText id="inputCodeModel" class="form-control text-center" @bind-Value="inputCodeModel.Code" maxlength="6" />
        </div>

        <button type="submit" class="btn btn-success mt-3">Verify</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(VerificationResult))
    {
        <p class="text-info mt-3">@VerificationResult</p>
    }
}

@code {
    public RegisterDTO Register = new();
    public MailDTO Mail = new();
    private int _state = 0;
    private bool isAgreed;
    private bool isDisagreed;
    private string? VerificationResult;
    public string code;
    private CodeModel inputCodeModel = new();
    public string Surname { get; set; } = "Ռոզի Մինասյան";
    public string Region { get; set; } = "Էջմիածին";
    public string School { get; set; } = "Էռռռնեկկյաննն";
    public string Grade { get; set; } = "4-րդ դասարան";
    public string DateOfBirth { get; set; } = "11/05/2006";

    public async Task RegisterClicked()
    {
        try
        {
            var response = await accountService.RegisterAsync(Register);

            if (response is null)
            {
                await js.InvokeVoidAsync("alert", "No response received from the server.");
                return;
            }

            await js.InvokeVoidAsync("alert", $"Response: {response.Message}");

            if (response.Flag)
            {
                Register = new();
                _state = 1;
            }
            else
            {
                await js.InvokeVoidAsync("alert", "Registration failed. Server returned false.");
            }
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Exception: {ex.Message}");
        }
    }

    private void OnNextClicked()
    {
        _state = 2;
    }

    private async Task SendEmailVerificationCode()
    {
        try
        {
            // Generate random 6-digit code

            code = new Random().Next(100000, 999999).ToString();

            // Store it temporarily (in memory, state, or send to server later)
            VerificationResult = $"Sent verification code to {Mail.Email}";

            // Build the email body (HTML)
            string emailBody = $@"
            <h3>DSHH Verification Code</h3>
            <p>Your code is: <strong>{code}</strong></p>
            <p>This code will expire in 5 minutes.</p>";

            // Send the email
            await emailService.SendEmailAsync(Mail.Email, "Your DSHH Verification Code", emailBody);

            await js.InvokeVoidAsync("alert", "Verification code sent!");
            _state = 3;
        }
        catch (Exception ex)
        {
            VerificationResult = "Error sending verification code.";
            await js.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }


    private async Task VerifyCode()
    {
        if (inputCodeModel.Code == code)
        {
            VerificationResult = "✅ Code verified successfully!";
            await js.InvokeVoidAsync("alert", VerificationResult);
            _state = 4;
        }
        else
        {
            VerificationResult = "❌ Invalid code. Please try again.";
            await js.InvokeVoidAsync("alert", VerificationResult);
        }
    }

    private async void ContactUs()
    {
        await js.InvokeVoidAsync("alert", "Please contact us for assistance.");
    }

    public class CodeModel
    {
        [Required(ErrorMessage = "Code is required")]
        [StringLength(6, MinimumLength = 6, ErrorMessage = "Code must be exactly 6 digits")]
        [RegularExpression("^[0-9]{6}$", ErrorMessage = "Code must be numeric")]
        public string Code { get; set; } = string.Empty;
    }
}

