@page "/register"
@using Registeration.DTOs
@using Registeration.Services
@using static Registeration.Responses.CustomResponses
@inject IJSRuntime js
@inject IAccountService accountService


@if (_state == 0)
{
    @* <div class="container">
        <div class="row">
            <div class="col-sm-4">
                <h3>Register</h3>
                <EditForm Model="Register" OnValidSubmit="RegisterClicked">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label class="form-label">Name</label>
                        <InputText @bind-Value="Register.Name" class="form-control"></InputText>
                    </div>
                    <div class="form-group mt-3">
                        <label class="form-label">Email Address</label>
                        <InputText @bind-Value="Register.Email" class="form-control"></InputText>
                    </div>
                    <div class="form-group mt-3">
                        <label class="form-label">Password</label>
                        <InputText @bind-Value="Register.Password" class="form-control"></InputText>
                    </div>
                    <div class="form-group mt-3">
                        <label class="form-label">Confirm Password</label>
                        <InputText @bind-Value="Register.ConfirmPassword" class="form-control"></InputText>
                    </div>
                    <div class="form-group mt-3">
                        <button class="btn btn-primary" type="submit">Next</button>
                    </div>
                    <ValidationSummary />
                </EditForm>
            </div>
        </div>
    </div> *@

    <EditForm Model="Register" OnValidSubmit="RegisterClicked">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="First name" HelperText="Max. 8 characters"
                        @bind-Value="Register.Name" For="@(() => Register.Name)" />
                        <MudTextField Label="Email" Class="mt-3"
                        @bind-Value="Register.Email" For="@(() => Register.Email)" />
                        <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                        @bind-Value="Register.Password" For="@(() => Register.Password)" InputType="InputType.Password" />
                        <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                        @bind-Value="Register.ConfirmPassword" For="@(() => Register.ConfirmPassword)" InputType="InputType.Password" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Next</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.body2" Align="Align.Center">
                    Fill out the form correctly to see the success message.
                </MudText>
            </MudItem>
        </MudGrid>
    </EditForm>
}



@if (_state == 1)
{
    <div>
        <MudTextField @bind-Value="Surname" Label="Ա․ Ա․ Հ․" ReadOnly="true" Variant="Variant.Filled" />
        <MudTextField @bind-Value="Region" Label="Մարզ" ReadOnly="true" Variant="Variant.Filled" />
        <MudTextField @bind-Value="School" Label="Դպրոց" ReadOnly="true" Variant="Variant.Filled" />
        <MudTextField @bind-Value="Grade" Label="Դասարան" ReadOnly="true" Variant="Variant.Filled" />
        <MudTextField @bind-Value="DateOfBirth" Label="Ծննդյան օր" ReadOnly="true" Variant="Variant.Filled" />
    </div>


    <div class="d-flex align-center gap-4 mt-4">
        <MudCheckBox T="bool"
        Label="I agree!"
        @bind-Value="isAgreed"
        Color="Color.Success" />

        <MudCheckBox T="bool"
        Label="I disagree!"
        @bind-Value="isDisagreed"
        Color="Color.Error" />
    </div>

    <MudButton ButtonType="ButtonType.Submit"
    Disabled="@(!isAgreed || isDisagreed)"
    Variant="Variant.Filled"
    Color="Color.Primary"
    Class="ml-auto mt-4"
    OnClick="OnNextClicked">
        NEXT
    </MudButton>

    <MudButton ButtonType="ButtonType.Submit"
    Disabled="@(isAgreed || !isDisagreed)"
    Variant="Variant.Filled"
    Color="Color.Primary"
    Class="ml-auto mt-4"
    OnClick="ContactUs">
        Contact Us
    </MudButton>

}


@if (_state == 2)
{
    <div class="container">
        <div class="row">
            <div class="col-sm-4">
                <h3>You are in state=2</h3>
            </div>
        </div>
    </div>
}

@code {
    public RegisterDTO Register = new();
    private int _state = 0;
    private bool isAgreed;
    private bool isDisagreed;

    public string Surname { get; set; } = "Շահանե Հակոբյան";
    public string Region { get; set; } = "Արագածոտն";
    public string School { get; set; } = "Ներքին Բազմաբերդի միջնակարգ դպրոց";
    public string Grade { get; set; } = "4-րդ դասարան";
    public string DateOfBirth { get; set; } = "01/06/2002";


    public async Task RegisterClicked()
    {
        try
        {
            RegisterationResponse response = await accountService.RegisterAsync(Register);
            await js.InvokeVoidAsync("alert", response.Message);

            if (response.Flag)
            {
                Register = new(); // Reset the form
                _state = 1; // Change state to hide the form
                StateHasChanged(); // Ensure UI updates (optional, depending on context)
            }
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Registration failed: {ex.Message}");
        }
    }

    private void OnNextClicked()
    {
        _state = 2;
    }

    private async void ContactUs()
    {
        await js.InvokeVoidAsync("alert", $"Please Contact Us!");
    }
}
