@page "/register"
@using MailKit
@using Registeration.DTOs
@using Registeration.Data
@using Registeration.Models
@using Registeration.Services
@using System.ComponentModel.DataAnnotations
@using static Registeration.Responses.CustomResponses
@inject IJSRuntime js
@inject IAccountService accountService
@inject IEmailService emailService
@inject IPupilService pupilService

@inject IDialogService DialogService


@if (_state == 0)
{
        <EditForm Model="Register" OnValidSubmit="RegisterClicked">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-md-6">
                        <div class="card mt-4">
                            <div class="card-body">
                                <div class="form-group">
                                    <label for="socNumber">Սոց. Քարտ</label>
                                    <InputText id="socNumber" class="form-control" @bind-Value="Register.SocNumber" />
                                    <ValidationMessage For="@(() => Register.SocNumber)" />
                                    <small class="form-text text-muted">Min 4, Max. 15 characters</small>
                                </div>

                                <div class="form-group mt-3">
                                    <label for="passport">Անձնագիր/Ծննդյան Վկայական</label>
                                    <InputText id="passport" class="form-control" @bind-Value="Register.Passport" />
                                    <ValidationMessage For="@(() => Register.Passport)" />
                                </div>
                            </div>

                            <div class="card-footer text-end">
                                <button type="submit" class="btn btn-primary">Next</button>
                            </div>
                        </div>

                        <p class="text-center mt-3 text-muted">
                            Լրացրեք բոլոր տվյալները հաջորդ քայլին անցնելու համար:
                        </p>
                    </div>
                </div>
            </div>
        </EditForm>
}

@if (_state == 1)
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-6 offset-md-3">
                <MudTextField @bind-Value="Pupil.Name" Label="Անուն" ReadOnly="true" Variant="Variant.Filled" />
                <MudTextField @bind-Value="Pupil.SurName" Label="Ազգանուն" ReadOnly="true" Variant="Variant.Filled" />
                <MudTextField @bind-Value="Pupil.MiddleName" Label="Հայրանուն" ReadOnly="true" Variant="Variant.Filled" />
                <MudTextField @bind-Value="Pupil.RegionName" Label="Մարզ" ReadOnly="true" Variant="Variant.Filled" />
                <MudTextField @bind-Value="Pupil.SchoolName" Label="Դպրոց" ReadOnly="true" Variant="Variant.Filled" />
                <MudTextField @bind-Value="Pupil.Grade" Label="Դասարան" ReadOnly="true" Variant="Variant.Filled" />
                <MudTextField @bind-Value="Pupil.Birthday" Label="Ծննդյան օր" ReadOnly="true" Variant="Variant.Filled" />

                <div class="d-flex align-center gap-4 mt-4">
                    <MudCheckBox T="bool" Label="I agree!" @bind-Value="isAgreed" Color="Color.Success" />
                    <MudCheckBox T="bool" Label="I disagree!" @bind-Value="isDisagreed" Color="Color.Error" />
                </div>

                <div class="d-flex gap-3 mt-4">
                    <MudButton ButtonType="ButtonType.Submit"
                               Disabled="@(!isAgreed || isDisagreed)"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="OnNextClicked">
                        NEXT
                    </MudButton>

                    <MudButton ButtonType="ButtonType.Submit"
                               Disabled="@(isAgreed || !isDisagreed)"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="ContactUs">
                        Contact Us
                    </MudButton>
                </div>
            </div>
        </div>
    </div>
}

@if (_state == 2)
{
    <EditForm Model="Mail" OnValidSubmit=SendEmailVerificationCode>
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mt-3">
            <label for="email">Email Address</label>
            <InputText id="email" class="form-control" @bind-Value="Mail.Email" />
            <ValidationMessage For="@(() => Mail.Email)" />
        </div>

        <button type="submit" class="btn btn-outline-primary mt-2">Send Code</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(VerificationResult))
    {
        <p class="text-success mt-2">@VerificationResult</p>
    }
}

@if (_state == 3)
{
    <EditForm Model="inputCodeModel" OnValidSubmit="VerifyCode">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mt-3">
            <label for="inputCodeModel">Enter the 6-digit code sent to your email</label>
            <InputText id="inputCodeModel" class="form-control text-center" @bind-Value="inputCodeModel.Code" maxlength="6" />
        </div>

        <div class="d-flex gap-3 mt-3">
            <button type="submit" class="btn btn-success">Verify</button>

            <button type="button" class="btn btn-outline-secondary" @onclick="SendEmailVerificationCode">
                ReSend Code
            </button>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(VerificationResult))
    {
        <p class="text-info mt-3">@VerificationResult</p>
    }
}


@if (_state == 4)
{
    <EditForm Model="User" OnValidSubmit="Submit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="User.UserName" />
            <ValidationMessage For="@(() => User.UserName)" />
        </div>

        <div class="form-group mt-3">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="User.Password" />
            <ValidationMessage For="@(() => User.Password)" />
        </div>

        <div class="form-group mt-3">
            <label for="confirmPassword">Confirm Password</label>
            <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="User.ConfirmPassword" />
            <ValidationMessage For="@(() => User.ConfirmPassword)" />
        </div>

        <button type="submit" class="btn btn-success mt-4">Register</button>
    </EditForm>

}

@code {
    public RegisterDTO Register = new();
    public MailDTO Mail = new();
    public UserDTO User = new();
    private PupilInfo Pupil = new();
    private int _state = 0;
    private bool isAgreed;
    private bool isDisagreed;
    private string? VerificationResult;
    public string code;
    private CodeModel inputCodeModel = new();

    public async Task RegisterClicked()
    {
        try
        {
            bool exists = await accountService.SocNumberExistsAsync(Register.SocNumber);

            if (exists)
            {
                VerificationResult = "Այս սոցիալական համարը արդեն գրանցված է։";
                await js.InvokeVoidAsync("alert", VerificationResult);
                return;
            }

            Pupil = await pupilService.GetPupilBySocNumber(Register.SocNumber);

            VerificationResult = null;
            _state = 1; // Move to next registration step
        }
        catch (Exception ex)
        {
            VerificationResult = $"Սխալ տեղի ունեցավ: {ex.Message}";
        }
    }

    private void OnNextClicked()
    {
        _state = 2;
    }

    private async Task SendEmailVerificationCode()
    {
        try
        {
            // Generate random 6-digit code
            code = new Random().Next(100000, 999999).ToString();

            // Build the email body
            string emailBody = $@"
        <h3>DSHH Verification Code</h3>
        <p>Your code is: <strong>{code}</strong></p>
        <p>This code will expire in 5 minutes.</p>";

            // Send the email
            await emailService.SendEmailAsync(Mail.Email, "Your DSHH Verification Code", emailBody);

            VerificationResult = $"📧 Verification code has been sent to {Mail.Email}";
            _state = 3; // Stay on the same step
        }
        catch (Exception ex)
        {
            VerificationResult = $"❌ Error sending verification code: {ex.Message}";
        }
    }



    private async Task VerifyCode()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(inputCodeModel.Code))
            {
                VerificationResult = "❗ Please enter the code.";
                return;
            }

            if (inputCodeModel.Code == code)
            {
                VerificationResult = "✅ Code verified successfully!";
                _state = 4;
            }
            else
            {
                VerificationResult = "❌ Invalid code. Please try again.";
            }
        }
        catch (Exception ex)
        {
            VerificationResult = $"❌ Error verifying code: {ex.Message}";
        }
    }



    private async Task Submit()
    {
        RegisterationResponse response = await accountService.RegisterAsync(Register, Mail, User);
        if (!response.Flag)
        {
            await js.InvokeVoidAsync("alert", response.Message);
            return;
        }
        await js.InvokeVoidAsync("alert", response.Message);
        return;
    }

    private void ContactUs()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        DialogService.Show<ContactDialog>("📞 Contact Us", options);
    }



    public class CodeModel
    {
        [Required(ErrorMessage = "Code is required")]
        [StringLength(6, MinimumLength = 6, ErrorMessage = "Code must be exactly 6 digits")]
        [RegularExpression("^[0-9]{6}$", ErrorMessage = "Code must be numeric")]
        public string Code { get; set; } = string.Empty;
    }
}

