@page "/counter"
@rendermode InteractiveServer

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject IEmailService EmailService
@inject FormStateService FormStateService
@inject ISnackbar Snackbar
@using Registeration.Services.CrmServices
@using Registeration.Services.Selection

@using System.Net.Http.Json
@using MudBlazor
@using Registeration.DTOs.SchoolDTOs
@using Registeration.DTOs.CrmDTOs
@using Registeration.Services.MailServices
@using Registeration.Services.FormStateServices
@using Registeration.Services.SchoolServices
@using System.Text.Json

@inject CrmService CrmService
@inject RegionSelection RegionSelection
@inject SchoolSelection SchoolSelection

<PageTitle>Գրանցում</PageTitle>

<style>
    body {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', sans-serif;
        background: radial-gradient(circle at center, #e4d9f9, #ffffff);
        background-attachment: fixed;
        background-repeat: no-repeat;
        overflow-x: hidden;
    }

    .blurred-bubbles {
        position: absolute;
        width: 100vw;
        height: 100vh;
        overflow: hidden;
        z-index: -1;
    }

    .bubble {
        position: absolute;
        border-radius: 50%;
        background: #b58df1;
        filter: blur(90px);
        opacity: 0.7;
    }

    .bubble1 {
        top: 10%;
        left: 5%;
        width: 300px;
        height: 300px;
    }

    .bubble2 {
        top: 30%;
        left: 60%;
        width: 400px;
        height: 400px;
    }

    .bubble3 {
        bottom: 10%;
        left: 30%;
        width: 500px;
        height: 500px;
    }

    .centered-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        padding: 2rem;
    }

    .form-box {
        background-color: rgba(255, 255, 255, 0.85);
        padding: 3rem;
        border-radius: 20px;
        max-width: 600px;
        width: 100%;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        backdrop-filter: blur(10px);
    }

    .form-title {
        font-size: 2rem;
        font-weight: bold;
        color: #6a1b9a;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .form-button {
        background-color: #6a1b9a;
        color: white;
        font-weight: bold;
    }
</style>

<div class="blurred-bubbles">
    <div class="bubble bubble1"></div>
    <div class="bubble bubble2"></div>
    <div class="bubble bubble3"></div>
</div>

<div class="centered-container">
    <div class="form-box">
        <div class="form-title">Գրանցում</div>


        <MudForm @ref="_form" Model="_model">
            <MudStack Spacing="2">
                <!-- Region -->
                <MudAutocomplete T="string"
                                 Label="Մարզ"
                                 Value="_selectedRegionName"
                                 ValueChanged="async val => await OnRegionChanged(val)"
                                 SearchFunc="@SearchRegions"
                                 Variant="Variant.Outlined"
                                 Required="true" />

                <!-- School -->
                <MudAutocomplete T="SchoolDTO"
                                 Label="Դպրոց"
                                 Value="_selectedSchool"
                                 ValueChanged="OnSchoolSelected"
                                 SearchFunc="SearchSchools"
                                 ToStringFunc="@(s => s == null ? string.Empty : $"{s.Name}")"
                                 Variant="Variant.Outlined"
                                 Required="true"
                                 Disabled="@string.IsNullOrWhiteSpace(_selectedRegionId)"
                                 MaxItems="null" />

                <!-- Address -->
                <MudAutocomplete T="string"
                                 Label="Հասցե"
                                 Value="_selectedAddress"
                                 ValueChanged="OnAddressSelected"
                                 SearchFunc="@SearchAddresses"
                                 Variant="Variant.Outlined"
                                 Required="true"
                                 Disabled="@string.IsNullOrWhiteSpace(_selectedRegionId)"
                                 MaxItems="null" />

                <!-- Director's' Name -->
                <MudTextField T="string"
                              Label="Տնօրենի Անուն"
                              @bind-Value="_model.DirectorName"
                              For="@(() => _model.DirectorName)"
                              Variant="Variant.Outlined"
                              Required="true" />

                <!-- Director's' SurName -->
                <MudTextField T="string"
                              Label="Տնօրենի Ազգանուն"
                              @bind-Value="_model.DirectorSurName"
                              For="@(() => _model.DirectorSurName)"
                              Variant="Variant.Outlined"
                              Required="true" />

                <!-- Email -->
                <MudTextField T="string"
                              Label="Էլ. հասցե"
                              @bind-Value="_model.Email"
                              Variant="Variant.Outlined"
                              InputType="InputType.Email"
                              Required="true" />

                <!-- Submit -->
                <MudButton OnClick="ValidateForm"
                           Variant="Variant.Filled"
                           Class="mt-4 form-button">
                    Գրանցվել
                </MudButton>
            </MudStack>
        </MudForm>
    </div>
</div>


@code {
    private MudForm _form = new();
    private RegistrationFormDTO _model = new();
    private string? _selectedRegionId;
    private string? _selectedRegionName;
    private string? _selectedAddress;
    private Guid? _selectedSchoolId;
    private SchoolDTO? _selectedSchool;
    private string? _selectedSchoolAddress;

    private List<ExternalRegionDTO> _regionList = new();
    private List<SchoolDTO> _currentRegionSchools = new();

    private async Task<IEnumerable<string>> SearchRegions(string value, CancellationToken token)
    {
        return await RegionSelection.SearchRegionsAsync(value);
    }

    private async Task OnRegionChanged(string selectedRegionName)
    {
        _selectedRegionName = selectedRegionName;
        _selectedSchool = null;
        _selectedAddress = null;
        _selectedSchoolId = null;
        _selectedSchoolAddress = null;

        var selectedRegion = await RegionSelection.OnRegionChangedAsync(selectedRegionName);
        _selectedRegionId = selectedRegion?.Id.ToString();

        if (selectedRegion != null)
        {
            await SchoolSelection.LoadSchoolsByRegionAsync(selectedRegion.Id);
        }
    }

    private async Task<IEnumerable<SchoolDTO>> SearchSchools(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(_selectedRegionId) || !Guid.TryParse(_selectedRegionId, out var regionGuid))
            return Enumerable.Empty<SchoolDTO>();

        return await SchoolSelection.SearchSchoolsAsyncWithAddresses(value, regionGuid);
    }

    private async Task<IEnumerable<string>> SearchAddresses(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(_selectedRegionId) || !Guid.TryParse(_selectedRegionId, out var regionGuid))
            return Enumerable.Empty<string>();

        await SchoolSelection.LoadSchoolsByRegionAsync(regionGuid);

        var filtered = string.IsNullOrWhiteSpace(value)
            ? SchoolSelection.GetCurrentSchools().Where(s => !string.IsNullOrWhiteSpace(s.Address))
            : SchoolSelection.GetCurrentSchools().Where(s =>
                !string.IsNullOrWhiteSpace(s.Address) &&
                s.Address.Contains(value, StringComparison.OrdinalIgnoreCase));

        return filtered
            .Select(s => s.Address!.Trim())
            .Distinct();
    }

    private async Task OnSchoolSelected(SchoolDTO selectedSchool)
    {
        _selectedSchool = selectedSchool;

        if (selectedSchool == null)
        {
            _selectedSchoolId = null;
            _selectedSchoolAddress = null;
            return;
        }

        _selectedSchoolId = selectedSchool.Id;
        _selectedSchoolAddress = selectedSchool.Address;
    }

    private Task OnAddressSelected(string selectedAddress)
    {
        _selectedAddress = selectedAddress;
        return Task.CompletedTask;
    }


    private async Task ValidateForm()
    {
        await _form.Validate();

        if (!_form.IsValid)
        {
            Snackbar.Add("Խնդրում ենք լրացնել բոլոր դաշտերը։", Severity.Error);
            return;
        }

        if (_selectedSchool == null)
        {
            Snackbar.Add("Խնդրում ենք ընտրել դպրոց։", Severity.Error);
            return;
        }

        if (_selectedAddress != _selectedSchool.Address)
        {
            Snackbar.Add("Ինչ-որ բան սխալ է։ Ընտրված հասցեն չի համապատասխանում ընտրված դպրոցին։", Severity.Error);
            return;
        }

        try
        {
            _model.School = new SchoolDTO
                {
                    Id = _selectedSchool.Id,
                    Name = _selectedSchool.Name,
                    Address = _selectedSchool.Address,
                    RegionId = _selectedSchool.RegionId
                };

            _model.Address = _selectedAddress ?? string.Empty;

            _model.Region = new RegionDTO
                {
                    Id = Guid.TryParse(_selectedRegionId, out var regionGuid) ? regionGuid : Guid.Empty,
                    Name = _selectedRegionName ?? string.Empty
                };

            _model.Login = _model.Email;
            _model.Password = GenerateCode(_model.Email);
            _model.AccessCode = Guid.NewGuid().ToString("N").Substring(0, 8);

            var response = await HttpClient.PostAsJsonAsync("api/regions/save", _model);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();

                if (result != null && result.TryGetValue("id", out var idObj) && Guid.TryParse(idObj?.ToString(), out Guid id))
                {
                    _model.Id = id;
                    FormStateService.FormModel = _model;
                    Snackbar.Add("Հաջողությամբ պահպանվեց։", Severity.Success);
                    Navigation.NavigateTo("/nextstep");
                }
                else
                {
                    Snackbar.Add("Չհաջողվեց ստանալ գրանցման նույնացուցիչը։", Severity.Error);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();

                if (errorContent.Contains("Դուք արդեն գրանցված եք", StringComparison.OrdinalIgnoreCase))
                {
                    Snackbar.Add("Դուք արդեն գրանցված եք։ Ստուգեք ձեր մուտքի տվյալները։", Severity.Warning);
                    return;
                }

                try
                {
                    var jsonDoc = JsonDocument.Parse(errorContent);
                    Snackbar.Add("Սխալ գրանցման ժամանակ։", Severity.Error);
                }
                catch
                {
                    Snackbar.Add("Սխալ գրանցման ժամանակ։", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Սերվերի սխալ․ {ex.Message}", Severity.Error);
        }
    }





    private static string GenerateCode(string input)
    {
        using var sha256 = System.Security.Cryptography.SHA256.Create();
        var bytes = System.Text.Encoding.UTF8.GetBytes(input);
        var hash = sha256.ComputeHash(bytes);
        var hex = BitConverter.ToString(hash).Replace("-", "");
        var digitsOnly = new string(hex.Where(char.IsDigit).ToArray()).PadRight(6, '0');
        return digitsOnly.Substring(0, 6);
    }
}
