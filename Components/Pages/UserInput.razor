@page "/confirm"
@using Registeration.DTOs
@inject HttpClient HttpClient
@inject NavigationManager Navigation

<MudPaper Elevation="3" Class="p-6 mx-auto mt-6" Style="max-width:600px;">
    <MudForm @ref="_form" Model="_model">
        <MudText Typo="Typo.h5" Class="mb-4">Գրանցման Տվյալների Հաստատում</MudText>

        <MudTextField T="string" Label="Մարզ" @bind-Value="_model.RegionName" Variant="Variant.Outlined" Disabled="true" />
        <MudTextField T="string" Label="Դպրոց" @bind-Value="_model.SchoolName" Variant="Variant.Outlined" Disabled="true" />
        <MudTextField T="string" Label="Հասցե" @bind-Value="_model.Address" Variant="Variant.Outlined" Disabled="true" />
        <MudTextField T="string" Label="Անուն / Ազգանուն" @bind-Value="_model.FullName" Variant="Variant.Outlined" Disabled="true" />
        <MudTextField T="string" Label="Էլ․ Հասցե" @bind-Value="_model.Email" Variant="Variant.Outlined" Disabled="true" />

        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OnConfirm" Class="mt-4 me-2">
            Հաստատել
        </MudButton>

        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="OnReject" Class="mt-4 me-2">
            Մերժել
        </MudButton>
    </MudForm>
</MudPaper>

@code {
    private MudForm _form;
    private RegistrationFormDTO _model = new();
    private Guid _registrationId;

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var idString = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("id");

        if (Guid.TryParse(idString, out Guid id))
        {
            _registrationId = id;
            try
            {
                var result = await HttpClient.GetFromJsonAsync<RegistrationFormDTO>($"api/regions/by-id/{id}");
                if (result != null)
                    _model = result;
            }
            catch (Exception ex)
            {
                Console.WriteLine("❌ Failed to load registration: " + ex.Message);
            }
        }
    }

    private async Task OnConfirm()
    {
        Console.WriteLine("✅ Հաստատվել է");
    }

    private async Task OnReject()
    {
        if (_registrationId == Guid.Empty)
            return;

        try
        {
            var response = await HttpClient.DeleteAsync($"api/regions/by-id/{_registrationId}");
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/retry");
            }
            else
            {
                Console.WriteLine("❌ Failed to delete registration.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Error during deletion: " + ex.Message);
        }
    }
}
