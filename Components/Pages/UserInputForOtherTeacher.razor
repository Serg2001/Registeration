@page "/confirm-otherteacher"
@using Registeration.DTOs
@using Registeration.Services
@using System.Security.Cryptography
@using System.Text
@inject HttpClient HttpClient
@inject NavigationManager Navigation
@inject IEmailService EmailService

<style>
    body {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', sans-serif;
        background: radial-gradient(circle at center, #e4d9f9, #ffffff);
        background-attachment: fixed;
        background-repeat: no-repeat;
        overflow-x: hidden;
    }

    .blurred-bubbles {
        position: absolute;
        width: 100vw;
        height: 100vh;
        overflow: hidden;
        z-index: -1;
    }

    .bubble {
        position: absolute;
        border-radius: 50%;
        background: #b58df1;
        filter: blur(90px);
        opacity: 0.7;
    }

    .bubble1 {
        top: 10%;
        left: 5%;
        width: 300px;
        height: 300px;
    }

    .bubble2 {
        top: 30%;
        left: 60%;
        width: 400px;
        height: 400px;
    }

    .bubble3 {
        bottom: 10%;
        left: 30%;
        width: 500px;
        height: 500px;
    }

    .centered-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        padding: 2rem;
    }

    .form-box {
        background-color: rgba(255, 255, 255, 0.85);
        padding: 3rem;
        border-radius: 20px;
        max-width: 600px;
        width: 100%;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        backdrop-filter: blur(10px);
    }

    .form-title {
        font-size: 2rem;
        font-weight: bold;
        color: #6a1b9a;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .form-button {
        background-color: #6a1b9a;
        color: white;
        font-weight: bold;
    }
</style>

<div class="blurred-bubbles">
    <div class="bubble bubble1"></div>
    <div class="bubble bubble2"></div>
    <div class="bubble bubble3"></div>
</div>

<div class="centered-container">
    <div class="form-box">
        <MudForm @ref="_form" Model="_model">
            <div class="form-title">Ուսուցչի Գրանցման Տվյալների Հաստատում</div>

            <MudTextField T="string" Label="Դպրոց"
                          Text="@_model.School?.Name"
                          Variant="Variant.Outlined" Disabled="true" />

            <MudTextField T="string" Label="Մարզ"
                          Text="@_model.Region?.Name"
                          Variant="Variant.Outlined" Disabled="true" />

            <MudTextField T="string" Label="Անուն / Ազգանուն"
                          Text="@_model.FullName"
                          Variant="Variant.Outlined" Disabled="true" />

            <MudTextField T="string" Label="Դասավանդվող առարկա"
                          Text="@_model.TeachingSubject"
                          Variant="Variant.Outlined" Disabled="true" />

            <MudTextField T="string" Label="Սոցիալական համար"
                          Text="@_model.SocNumber"
                          Variant="Variant.Outlined" Disabled="true" />

            <MudTextField T="string" Label="Էլ․ հասցե"
                          Text="@_model.Email"
                          Variant="Variant.Outlined" Disabled="true" />

            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OnConfirm" Class="mt-4 me-2">
                Հաստատել
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="OnReject" Class="mt-4 me-2">
                Մերժել
            </MudButton>
        </MudForm>
    </div>
</div>

@code {
    private MudForm _form;
    private OtherTeacherDTO _model = new();
    private Guid _teacherId;

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var idString = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("id");

        if (Guid.TryParse(idString, out Guid id))
        {
            _teacherId = id;
            try
            {
                var result = await HttpClient.GetFromJsonAsync<OtherTeacherDTO>($"api/otherteacher/by-id/{id}");
                if (result != null)
                    _model = result;
            }
            catch (Exception ex)
            {
                Console.WriteLine("❌ Failed to load OtherTeacher: " + ex.Message);
            }
        }
    }

    private async Task OnConfirm()
    {
        Console.WriteLine($"✅ Հաստատվել է՝ {_teacherId}");

        try
        {
            var identityString = await HttpClient.GetStringAsync($"api/otherteacher/identity-string/{_teacherId}");

            string password = GenerateCode(_model.Email);
            string accessCode = GenerateCode(identityString);

            var confirmData = new
            {
                Password = password,
                AccessCode = accessCode
            };

            var updateResponse = await HttpClient.PostAsJsonAsync($"api/otherteacher/confirm/{_teacherId}", confirmData);
            if (!updateResponse.IsSuccessStatusCode)
            {
                Console.WriteLine("❌ Failed to update credentials in database.");
                return;
            }

            string emailBody = $@"
                <h3>Բարև Ձեզ, {_model.FullName}</h3>
                <p>Ձեր գրանցումն հաստատվել է։</p>
                <ul>
                    <li><b>Մուտքանուն:</b> {_model.Email}</li>
                    <li><b>Գաղտնաբառ:</b> {password}</li>
                    <li><b>Մուտքի կոդ:</b> {accessCode}</li>
                </ul>";

            await EmailService.SendEmailAsync(_model.Email, "Մուտքի Տվյալներ", emailBody);
            Console.WriteLine("📧 Email sent with login details.");

            Navigation.NavigateTo("/success");
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Error during confirmation: " + ex.Message);
            if (ex.InnerException != null)
                Console.WriteLine("Inner: " + ex.InnerException.Message);
        }
    }

    private async Task OnReject()
    {
        if (_teacherId == Guid.Empty)
            return;

        try
        {
            var response = await HttpClient.DeleteAsync($"api/otherteacher/delete/{_teacherId}");
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/retry");
            }
            else
            {
                Console.WriteLine("❌ Failed to delete OtherTeacher.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Error during deletion: " + ex.Message);
        }
    }

    private static string GenerateCode(string input)
    {
        using (var sha256 = SHA256.Create())
        {
            byte[] bytes = Encoding.UTF8.GetBytes(input);
            byte[] hash = sha256.ComputeHash(bytes);

            string hex = BitConverter.ToString(hash).Replace("-", "");
            string digitsOnly = new string(hex.Where(char.IsDigit).ToArray()).PadRight(3, '0');
            string digitPart = digitsOnly.Substring(0, 3);

            char[] upper = {
                'Ա', 'Բ', 'Գ', 'Դ', 'Ե', 'Զ', 'Է', 'Ը', 'Թ', 'Ժ', 'Ի', 'Լ', 'Խ',
                'Ծ', 'Կ', 'Հ', 'Ձ', 'Ղ', 'Ճ', 'Մ', 'Յ', 'Ն', 'Շ', 'Ո', 'Չ', 'Պ',
                'Ջ', 'Ռ', 'Ս', 'Վ', 'Տ', 'Ր', 'Ց', 'Փ', 'Ք', 'Օ', 'Ֆ'
        };

            char[] lower = {
                'ա', 'բ', 'գ', 'դ', 'ե', 'զ', 'է', 'ը', 'թ', 'ժ', 'ի', 'լ', 'խ',
                'ծ', 'կ', 'հ', 'ձ', 'ղ', 'ճ', 'մ', 'յ', 'ն', 'շ', 'ո', 'չ', 'պ',
                'ջ', 'ռ', 'ս', 'վ', 'տ', 'ր', 'ց', 'փ', 'ք', 'օ', 'ֆ'
        };

            char[] symbols = { '!', '@', '#', '$', '%', '&', '*' };

            Random rand = new Random(hash[0] + hash[1] + hash[2]);

            char letter1 = rand.Next(2) == 0 ? upper[hash[3] % upper.Length] : lower[hash[4] % lower.Length];
            char letter2 = rand.Next(2) == 0 ? upper[hash[5] % upper.Length] : lower[hash[6] % lower.Length];
            char symbol = symbols[hash[7] % symbols.Length];

            char[] codeChars = new[] {
                digitPart[0], digitPart[1], digitPart[2],
                letter1, letter2,
                symbol
            };

            codeChars = codeChars.OrderBy(_ => rand.Next()).ToArray();

            return new string(codeChars);
        }
    }
}
